#    "$Name:  $";
#    "$Header:  $";
#=============================================================================
#
# file :        MaxiGaugeController.py
#
# description : Python source for the MaxiGaugeController and its commands. 
#                The class is derived from Device. It represents the
#                CORBA servant object which will be accessed from the
#                network. All commands which can be executed on the
#                LeyboldGaugeController are implemented in this file.
#
# project :     TANGO Device Server
#
# $Author:  srubio@cells.es $
#
# $Revision:  $
#
# $Log:  $
#
# copyleft :    European Synchrotron Radiation Facility
#               BP 220, Grenoble 38043
#               FRANCE
#
#=============================================================================
#          This file is generated by POGO
#    (Program Obviously used to Generate tango Object)
#
#         (c) - Software Engineering Group - ESRF
#=============================================================================
#


import PyTango
import sys
import time
import inspect

#PROTOCOL VARIABLES
ETX = '\x03' #Reset the interface
CR = '\x0D' #End of String
LF = '\x0A' #End of String
ENQ = '\x05' #Request for data transmission
ACK = '\x06' #Positive Report Signal
NACK = '\x15' #Negative report Signal
ESC = '\x1B'
GaugeStatus = ['OK','Underrange','Overrange','NoSensor','SensorError','EmissionON','DegasON','SensorSelected']

LeyboldComms = {
    'BufferReset': (ETX+'\r'),
    'P1': ('PRS,1\r'),
    'P2': ('PRS,2\r'),
    'P3': ('PRS,3\r'),
    'P4': ('PRS,4\r'),
    'ProgNum': (ETX+'\rIMF\r'),
    'ErrorStatus': (ETX+'\rERR\r')
    }

from VacuumController import *

#==================================================================
#   LeyboldGaugeController Class Description:
#
#         This Device Server allows to communicate with LeyboldGauge Controllers.
#         The target is reading the pressure from 4/6 channels available.
#
#==================================================================
#     Device States Description:
#
#   DevState.INIT :
#   DevState.ON :
#   DevState.OFF :
#   DevState.ALARM :
#   DevState.UNKNOWN :
#==================================================================


class LeyboldGaugeController(PyTango.Device_3Impl):

#--------- Add you global variables here --------------------------

    def int2bin(self,i,n):
        return tuple((0,1)[i>>j & 1] for j in xrange(n-1,-1,-1))
    
    def read_pressure_attribute(self,nchan,Command):
        result=''; pstatus='Unknown'
        print self.get_name(),': in read_pressure_attribute(',nchan,',',Command,') ...'
        try:
            result=self.SVD.getComm(Command)
            print 'P['+str(nchan)+']=('+Command+') returned: '+str(result)
            if result is None: 
                #raise Exception, 'Hardware not readed yet'
                print 'Value returned is None(NULL)'
                PyTango.Except.throw_exception('Value returned is None(NULL)','Hardware not readed yet',inspect.currentframe().f_code.co_name)
            elif ',' not in result:
                print 'Value returned has wrong format','Received: '+result
                PyTango.Except.throw_exception('Value returned has wrong format','Received: '+result,inspect.currentframe().f_code.co_name)
            try: 
                bits = self.int2bin(int(result.split(',')[0],16),8)
                print str(result.split(',')[0]),'=',str(list(bits))
                if not 1 in bits: pstatus = 'ERROR'
                else: pstatus = GaugeStatus[list(bits).index(1)]
                attr_Px_read = getExpNumbers(result.split(',')[1])[0]#float(result)
            except Exception,e: 
                print str(e)
                self.ChannelState[nchan-1] = pstatus
                PyTango.Except.throw_exception(str(e),'ChannelState='+str(pstatus),inspect.currentframe().f_code.co_name)
            #attr.set_quality(PyTango.AttrQuality.VALID)
            self.ChannelState[nchan-1],self.PressureValues[nchan-1] = pstatus,attr_Px_read
            return attr_Px_read
            
        except DevFailed, e:
            self.ChannelState[nchan-1],self.PressureValues[nchan-1] = (result or 'Unknown'),-1.0
            PyTango.Except.re_throw_exception(e,"DevFailed Exception","read_Px()="+str(result),inspect.currentframe().f_code.co_name)
            
        except Exception, e:
            print "Exception '",str(e),"' in ",inspect.currentframe().f_code.co_name    
            self.set_status('Last exception was: \n'+str(e)+'\n')#self.get_status()+'\n'+str(e))
            PyTango.Except.throw_exception("Python Exception","Exception: "+str(e),"read_Px()")

#------------------------------------------------------------------
#    Device constructor
#------------------------------------------------------------------
    def __init__(self,cl, name):
        PyTango.Device_3Impl.__init__(self,cl,name)
        LeyboldGaugeController.init_device(self)

#------------------------------------------------------------------
#    Device destructor
#------------------------------------------------------------------
    def delete_device(self):
        print "[Device delete_device method] for device",self.get_name()
        self.SVD.event.set()


#------------------------------------------------------------------
#    Device initialization
#------------------------------------------------------------------
    def init_device(self):
        print "In ", self.get_name(), "::init_device()"
        self.set_state(PyTango.DevState.ON)
        self.get_device_properties(self.get_device_class())
        
        self.PressureValues=[]
        for i in range(6): self.PressureValues.append(0.)
        self.ChannelState=[]
        for i in range(6): self.ChannelState.append('Unknown')
        
        try:
            if not self.Refresh: # or self.Refresh<1:
                self.Refresh=2
        except Exception:
            self.Refresh=2

        if len(self.SerialLine):
            from VacuumController import SerialVacuumDevice
            self.SVD=SerialVacuumDevice(self.SerialLine,self.Refresh)
            #,self.get_name())
            self.SVD.addComm(LeyboldComms['P1'])
            self.SVD.addComm(LeyboldComms['P2'])
            self.SVD.addComm(LeyboldComms['P3'])
            self.SVD.addComm(LeyboldComms['P4'])
            self.SVD.addComm(LeyboldComms['ProgNum'])
            self.SVD.PostCommand.append([ENQ,ACK,NACK])
            self.SVD.start()
        else:
            self.set_state(PyTango.DevState.FAULT)
            raise RuntimeError, str('SerialLine property requires a value!')
        
        print "Device Server ", self.get_name(), ' waiting for request.'
        #print self.__class__.__name__
        #print '('+self.init_device.im_self
        #print ":"+ self.get_name()+')'+"::"
        #print im_func.__name__+"(...): "
        
        self.set_state(DevState.INIT)

#------------------------------------------------------------------
#    Always excuted hook method
#------------------------------------------------------------------
    def always_executed_hook(self):
        print "In ", self.get_name(), "::always_executed_hook()"
        
        if self.SVD.init == False:
            self.set_state(DevState.INIT)
        elif self.SVD.errors>=self.SVD.comms:
            self.set_state(DevState.FAULT)
        else:
            self.set_state(DevState.ON)
        
        status = 'The Device is '+str(self.get_state())+'\n'    
        if len(self.SVD.lastrecv):
            status = status+'Last communication received at '+str(self.SVD.lasttime)+': "'+str(self.SVD.lastrecv)+'"\n'
        if self.SVD.errors:
            status = status+str(self.SVD.errors)+' communication errors\n'
        for i in range(len(self.ChannelState)):
            if self.ChannelState[i]!='Unknown':
                status = status+'P'+str(i+1)+' State is \''+str(self.ChannelState[i])+'\'' 
                status = status+'; last value readed is \''+str(self.PressureValues[i])+'\''
                status = status+'\n'
        self.set_status(status)        

#==================================================================
#
#    LeyboldGaugeController read/write attribute methods
#
#==================================================================
#------------------------------------------------------------------
#    Read Attribute Hardware
#------------------------------------------------------------------
    def read_attr_hardware(self,data):
        print "In ", self.get_name(), "::read_attr_hardware()"



#------------------------------------------------------------------
#    Read P1 attribute
#------------------------------------------------------------------
    def read_P1(self, attr):
        print "In ", self.get_name(), "::read_P1()"
        
        #    Add your own code here
        attr.set_value(self.read_pressure_attribute(1,LeyboldComms['P1']))


#------------------------------------------------------------------
#    Read P2 attribute
#------------------------------------------------------------------
    def read_P2(self, attr):
        print "In ", self.get_name(), "::read_P2()"
        
        #    Add your own code here
        attr.set_value(self.read_pressure_attribute(2,LeyboldComms['P2']))

#------------------------------------------------------------------
#    Read P3 attribute
#------------------------------------------------------------------
    def read_P3(self, attr):
        print "In ", self.get_name(), "::read_P3()"
        
        #    Add your own code here
        attr.set_value(self.read_pressure_attribute(3,LeyboldComms['P3']))


#------------------------------------------------------------------
#    Read P4 attribute
#------------------------------------------------------------------
    def read_P4(self, attr):
        print "In ", self.get_name(), "::read_P4()"
        
        #    Add your own code here
        attr.set_value(self.read_pressure_attribute(4,LeyboldComms['P4']))


#------------------------------------------------------------------
#    Read ChannelState attribute
#------------------------------------------------------------------
    def read_ChannelState(self, attr):
        print "In ", self.get_name(), "::read_ChannelState()"
        
        #    Add your own code here
        #for i in range(6):
            #s = self.SVD.getComm('P'+str(i+1))
            #try:
                #float(s)
                #s='OK'
            #except:
                #pass
            #self.ChannelState[i] = s or 'Unknown'
        attr_ChannelState_read = self.ChannelState
        attr.set_value(attr_ChannelState_read)


#==================================================================
#
#    LeyboldGaugeController command methods
#
#==================================================================

#------------------------------------------------------------------
#    SendCommand command:
#
#    Description: 
#    argin:  DevString    
#    argout: DevString    
#------------------------------------------------------------------
    def SendCommand(self, argin):
        print "In ", self.get_name(), "::SendCommand()"
        #    Add your own code here
        
        return argout


#==================================================================
#
#    LeyboldGaugeControllerClass class definition
#
#==================================================================
class LeyboldGaugeControllerClass(PyTango.PyDeviceClass):

    #    Class Properties
    class_property_list = {
        'Refresh':
            [PyTango.DevDouble,
            "Refresh period (s) for each attribute of the device.",
            [ 1. ] ],
        }


    #    Device Properties
    device_property_list = {
        'SerialLine':
            [PyTango.DevString,
            "Serial line device server used to communicate with the Gauge Controller",
            [] ],
        'Model':
            [PyTango.DevString,
            "LeyboldGauge",
            [ "LeyboldGauge" ] ],
        }


    #    Command definitions
    cmd_list = {
        'SendCommand':
            [[PyTango.DevString, ""],
            [PyTango.DevString, ""],
            {
                'Display level':PyTango.DispLevel.EXPERT,
             } ],
        }


    #    Attribute definitions
    attr_list = {
        'P1':
            [[PyTango.DevDouble,
            PyTango.SCALAR,
            PyTango.READ],
            {
                'unit':"mbar",
                'format':"scientific;uppercase;setprecision(3)",
            } ],
        'P2':
            [[PyTango.DevDouble,
            PyTango.SCALAR,
            PyTango.READ],
            {
                'unit':"mbar",
                'format':"scientific;uppercase;setprecision(3)",
            } ],
        'P3':
            [[PyTango.DevDouble,
            PyTango.SCALAR,
            PyTango.READ],
            {
                'unit':"mbar",
                'format':"scientific;uppercase;setprecision(3)",
            } ],
        'P4':
            [[PyTango.DevDouble,
            PyTango.SCALAR,
            PyTango.READ],
            {
                'unit':"mbar",
                'format':"scientific;uppercase;setprecision(3)",
            } ],
        'ChannelState':
            [[PyTango.DevString,
            PyTango.SPECTRUM,
            PyTango.READ, 6]],
        }


#------------------------------------------------------------------
#    LeyboldGaugeControllerClass Constructor
#------------------------------------------------------------------
    def __init__(self, name):
        PyTango.PyDeviceClass.__init__(self, name)
        self.set_type(name);
        print "In LeyboldGaugeControllerClass  constructor"

#==================================================================
#
#    LeyboldGaugeController class main method
#
#==================================================================
if __name__ == '__main__':
    try:
        py = PyTango.PyUtil(sys.argv)
        py.add_TgClass(LeyboldGaugeControllerClass,LeyboldGaugeController,'LeyboldGaugeController')

        U = PyTango.Util.instance()
        U.server_init()
        U.server_run()

    except PyTango.DevFailed,e:
        print '-------> Received a DevFailed exception:',e
    except Exception,e:
        print '-------> An unforeseen exception occured....',e
